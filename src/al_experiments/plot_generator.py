import numpy as np
import matplotlib.pyplot as plt


class PlotGenerator:
    def __init__(self):
        pass

    def create_progress_plot(self):
        random_baseline_whole_instances_runtime_frac = np.array([0.012854, 0.014792, 0.016731, 0.018669, 0.020608, 0.022546, 0.024485, 0.026423, 0.028362, 0.030300, 0.032239, 0.034177, 0.036116, 0.038054, 0.039993, 0.041931, 0.043869, 0.045808, 0.047746, 0.049685, 0.051623, 0.053562, 0.055500, 0.057439, 0.059377, 0.061316, 0.063254, 0.065193, 0.067131, 0.069070, 0.071008, 0.072946, 0.074885, 0.076823, 0.078762, 0.080700, 0.082639, 0.084577, 0.086516, 0.088454, 0.090393, 0.092331, 0.094270, 0.096208, 0.098147, 0.100085, 0.102023, 0.103962, 0.105900, 0.107839, 0.109777, 0.111716, 0.113654, 0.115593, 0.117531, 0.119470, 0.121408, 0.123347, 0.125285, 0.127223, 0.129162, 0.131100, 0.133039, 0.134977, 0.136916, 0.138854, 0.140793, 0.142731, 0.144670, 0.146608, 0.148547, 0.150485, 0.152424, 0.154362, 0.156300, 0.158239, 0.160177, 0.162116, 0.164054, 0.165993, 0.167931, 0.169870, 0.171808, 0.173747, 0.175685, 0.177624, 0.179562, 0.181501, 0.183439, 0.185377, 0.187316, 0.189254, 0.191193, 0.193131, 0.195070, 0.197008, 0.198947, 0.200885, 0.202824, 0.204762])   
        random_baseline_whole_instances_true_acc = np.array([0.800671, 0.815994, 0.831123, 0.840869, 0.849788, 0.858210, 0.865402, 0.871996, 0.876478, 0.881804, 0.886714, 0.890490, 0.896291, 0.900608, 0.902859, 0.904178, 0.904763, 0.904025, 0.901968, 0.900711, 0.901171, 0.902492, 0.905383, 0.909716, 0.913746, 0.917232, 0.920133, 0.920813, 0.920997, 0.920607, 0.919150, 0.919176, 0.919301, 0.920650, 0.923952, 0.927819, 0.931296, 0.933643, 0.935445, 0.936112, 0.935805, 0.934204, 0.931470, 0.928752, 0.925632, 0.923231, 0.921840, 0.920926, 0.921713, 0.922844, 0.925048, 0.927268, 0.928746, 0.929591, 0.929659, 0.929496, 0.929816, 0.929342, 0.928226, 0.927260, 0.927368, 0.928662, 0.930807, 0.932590, 0.933650, 0.934468, 0.934882, 0.934914, 0.934747, 0.934176, 0.932449, 0.930397, 0.928821, 0.928179, 0.928629, 0.929744, 0.932620, 0.936301, 0.940253, 0.943307, 0.945378, 0.946918, 0.947236, 0.946021, 0.945092, 0.943900, 0.943051, 0.942690, 0.942132, 0.941903, 0.942127, 0.942416, 0.942220, 0.941933, 0.941853, 0.941881, 0.942131, 0.943495, 0.945489, 0.946260])

        random_baseline_dynamic_timeout_runtime_frac = np.array([0.000233, 0.002042, 0.003850, 0.005658, 0.007467, 0.009275, 0.011083, 0.012891, 0.014700, 0.016508, 0.018316, 0.020125, 0.021933, 0.023741, 0.025550, 0.027358, 0.029166, 0.030974, 0.032783, 0.034591, 0.036399, 0.038208, 0.040016, 0.041824, 0.043633, 0.045441, 0.047249, 0.049057, 0.050866, 0.052674, 0.054482, 0.056291, 0.058099, 0.059907, 0.061716, 0.063524, 0.065332, 0.067140, 0.068949, 0.070757, 0.072565, 0.074374, 0.076182, 0.077990, 0.079799, 0.081607, 0.083415, 0.085223, 0.087032, 0.088840, 0.090648, 0.092457, 0.094265, 0.096073, 0.097882, 0.099690, 0.101498, 0.103306, 0.105115, 0.106923, 0.108731, 0.110540, 0.112348, 0.114156, 0.115965, 0.117773, 0.119581, 0.121389, 0.123198, 0.125006, 0.126814, 0.128623, 0.130431, 0.132239, 0.134048, 0.135856, 0.137664, 0.139472, 0.141281, 0.143089, 0.144897, 0.146706, 0.148514, 0.150322, 0.152131, 0.153939, 0.155747, 0.157555, 0.159364, 0.161172, 0.162980, 0.164789, 0.166597, 0.168405, 0.170214, 0.172022, 0.173830, 0.175639, 0.177447, 0.179255])    
        random_baseline_dynamic_timeout_true_acc = np.array([0.732619, 0.856523, 0.868901, 0.882169, 0.883973, 0.879346, 0.891275, 0.891847, 0.894557, 0.893746, 0.896611, 0.890922, 0.901432, 0.908260, 0.902582, 0.907933, 0.902097, 0.899038, 0.903821, 0.906894, 0.902879, 0.908655, 0.909097, 0.908730, 0.907207, 0.907966, 0.913631, 0.907616, 0.909618, 0.910934, 0.907407, 0.903917, 0.904092, 0.898227, 0.900781, 0.906085, 0.903549, 0.907407, 0.898499, 0.898975, 0.908635, 0.903020, 0.900988, 0.906085, 0.907647, 0.908730, 0.911376, 0.901478, 0.901609, 0.904755, 0.908892, 0.903957, 0.899471, 0.902021, 0.899832, 0.903703, 0.903439, 0.903439, 0.904762, 0.912901, 0.915254, 0.914959, 0.911376, 0.915344, 0.918822, 0.915219, 0.914615, 0.914226, 0.915344, 0.916667, 0.915344, 0.919312, 0.921950, 0.916537, 0.917989, 0.914153, 0.924477, 0.927364, 0.916797, 0.918372, 0.919452, 0.923439, 0.923394, 0.929894, 0.927249, 0.925926, 0.929395, 0.928561, 0.928181, 0.924603, 0.932270, 0.932540, 0.933759, 0.931217, 0.935059, 0.935185, 0.933862, 0.937831, 0.933847, 0.931217])

        variance_based_selection_runtime_frac = np.array([0.002298, 0.003724, 0.005151, 0.006578, 0.008004, 0.009431, 0.010858, 0.012284, 0.013711, 0.015138, 0.016564, 0.017991, 0.019418, 0.020844, 0.022271, 0.023698, 0.025124, 0.026551, 0.027978, 0.029404, 0.030831, 0.032258, 0.033685, 0.035111, 0.036538, 0.037965, 0.039391, 0.040818, 0.042245, 0.043671, 0.045098, 0.046525, 0.047951, 0.049378, 0.050805, 0.052231, 0.053658, 0.055085, 0.056511, 0.057938, 0.059365, 0.060791, 0.062218, 0.063645, 0.065071, 0.066498, 0.067925, 0.069351, 0.070778, 0.072205, 0.073631, 0.075058, 0.076485, 0.077911, 0.079338, 0.080765, 0.082192, 0.083618, 0.085045, 0.086472, 0.087898, 0.089325, 0.090752, 0.092178, 0.093605, 0.095032, 0.096458, 0.097885, 0.099312, 0.100738, 0.102165, 0.103592, 0.105018, 0.106445, 0.107872, 0.109298, 0.110725, 0.112152, 0.113578, 0.115005, 0.116432, 0.117858, 0.119285, 0.120712, 0.122138, 0.123565, 0.124992, 0.126418, 0.127845, 0.129272, 0.130699, 0.132125, 0.133552, 0.134979, 0.136405, 0.137832, 0.139259, 0.140685, 0.142112, 0.143539])  
        variance_based_selection_true_acc = np.array([0.802179, 0.815325, 0.821714, 0.829112, 0.837802, 0.840405, 0.844817, 0.848778, 0.849851, 0.850670, 0.851558, 0.852389, 0.854510, 0.859935, 0.867421, 0.874355, 0.878819, 0.880730, 0.882847, 0.884688, 0.886474, 0.889573, 0.891923, 0.893214, 0.894246, 0.895334, 0.896721, 0.898168, 0.899581, 0.901787, 0.904594, 0.907746, 0.910952, 0.913655, 0.914495, 0.914601, 0.913331, 0.912274, 0.912282, 0.912549, 0.913679, 0.914232, 0.913793, 0.913313, 0.912863, 0.914563, 0.915963, 0.916391, 0.916623, 0.916497, 0.916864, 0.917380, 0.917660, 0.918070, 0.918479, 0.919161, 0.919485, 0.920138, 0.920728, 0.920082, 0.919787, 0.919767, 0.920038, 0.921426, 0.923065, 0.924713, 0.926290, 0.928292, 0.929882, 0.931300, 0.933537, 0.935675, 0.937343, 0.938549, 0.939656, 0.940860, 0.942117, 0.943115, 0.944101, 0.945142, 0.945847, 0.946553, 0.947267, 0.947982, 0.948820, 0.949580, 0.950248, 0.950471, 0.950756, 0.950920, 0.950967, 0.950896, 0.950823, 0.951183, 0.951512, 0.951840, 0.952168, 0.952497, 0.952472, 0.952381]) 

        dynamic_timeout_optimized_runtime_frac = np.array([0.001427, 0.002411, 0.003394, 0.004377, 0.005361, 0.006344, 0.007327, 0.008311, 0.009294, 0.010277, 0.011261, 0.012244, 0.013227, 0.014211, 0.015194, 0.016178, 0.017161, 0.018144, 0.019128, 0.020111, 0.021094, 0.022078, 0.023061, 0.024044, 0.025028, 0.026011, 0.026994, 0.027978, 0.028961, 0.029944, 0.030928, 0.031911, 0.032894, 0.033878, 0.034861, 0.035845, 0.036828, 0.037811, 0.038795, 0.039778, 0.040761, 0.041745, 0.042728, 0.043711, 0.044695, 0.045678, 0.046661, 0.047645, 0.048628, 0.049611, 0.050595, 0.051578, 0.052561, 0.053545, 0.054528, 0.055512, 0.056495, 0.057478, 0.058462, 0.059445, 0.060428, 0.061412, 0.062395, 0.063378, 0.064362, 0.065345, 0.066328, 0.067312, 0.068295, 0.069278, 0.070262, 0.071245, 0.072228, 0.073212, 0.074195, 0.075179, 0.076162, 0.077145, 0.078129, 0.079112, 0.080095, 0.081079, 0.082062, 0.083045, 0.084029, 0.085012, 0.085995, 0.086979, 0.087962, 0.088945, 0.089929, 0.090912, 0.091895, 0.092879, 0.093862, 0.094845, 0.095829, 0.096812, 0.097796, 0.098779]) 
        dynamic_timeout_optimized_true_acc = np.array([0.915045, 0.911842, 0.903083, 0.905274, 0.909750, 0.923364, 0.930298, 0.930972, 0.930386, 0.918715, 0.921096, 0.926069, 0.924703, 0.917278, 0.918582, 0.916526, 0.913898, 0.919391, 0.919613, 0.920864, 0.918878, 0.919720, 0.919967, 0.919121, 0.921070, 0.918207, 0.912812, 0.909581, 0.907517, 0.907499, 0.908177, 0.907898, 0.906824, 0.903456, 0.905493, 0.906737, 0.904698, 0.904792, 0.905999, 0.905993, 0.904649, 0.902110, 0.899954, 0.897426, 0.893337, 0.892723, 0.895743, 0.893570, 0.893444, 0.894502, 0.894002, 0.889396, 0.890087, 0.892857, 0.894163, 0.896261, 0.897140, 0.900478, 0.901393, 0.903588, 0.899612, 0.900736, 0.897163, 0.894490, 0.898444, 0.900974, 0.902380, 0.900323, 0.901981, 0.899697, 0.897681, 0.901584, 0.899075, 0.897663, 0.897110, 0.896737, 0.897074, 0.893708, 0.894759, 0.895580, 0.895503, 0.894948, 0.896996, 0.894498, 0.892857, 0.892041, 0.891571, 0.892358, 0.892372, 0.894156, 0.889654, 0.894529, 0.897532, 0.900728, 0.902143, 0.901996, 0.902031, 0.904149, 0.906475, 0.906085]) 


        # optimize diff * rt e8e93020
        dynamic_timeout_quantized_selection_runtime_fraction = np.array([8.450451e-08, 9.655512e-04, 1.931018e-03, 2.896485e-03, 3.861951e-03, 4.827418e-03, 5.792884e-03, 6.758351e-03, 7.723818e-03, 8.689284e-03, 9.654751e-03, 1.062022e-02, 1.158568e-02, 1.255115e-02, 1.351662e-02, 1.448208e-02, 1.544755e-02, 1.641302e-02, 1.737848e-02, 1.834395e-02, 1.930942e-02, 2.027488e-02, 2.124035e-02, 2.220582e-02, 2.317128e-02, 2.413675e-02, 2.510222e-02, 2.606768e-02, 2.703315e-02, 2.799862e-02, 2.896408e-02, 2.992955e-02, 3.089502e-02, 3.186048e-02, 3.282595e-02, 3.379142e-02, 3.475688e-02, 3.572235e-02, 3.668782e-02, 3.765328e-02, 3.861875e-02, 3.958422e-02, 4.054968e-02, 4.151515e-02, 4.248062e-02, 4.344608e-02, 4.441155e-02, 4.537702e-02, 4.634248e-02, 4.730795e-02, 4.827342e-02, 4.923888e-02, 5.020435e-02, 5.116982e-02, 5.213528e-02, 5.310075e-02, 5.406622e-02, 5.503168e-02, 5.599715e-02, 5.696262e-02, 5.792808e-02, 5.889355e-02, 5.985902e-02, 6.082448e-02, 6.178995e-02, 6.275542e-02, 6.372088e-02, 6.468635e-02, 6.565182e-02, 6.661728e-02, 6.758275e-02, 6.854822e-02, 6.951368e-02, 7.047915e-02, 7.144462e-02, 7.241008e-02, 7.337555e-02, 7.434102e-02, 7.530648e-02, 7.627195e-02, 7.723742e-02, 7.820288e-02, 7.916835e-02, 8.013382e-02, 8.109928e-02, 8.206475e-02, 8.303022e-02, 8.399568e-02, 8.496115e-02, 8.592662e-02, 8.689208e-02, 8.785755e-02, 8.882302e-02, 8.978848e-02, 9.075395e-02, 9.171942e-02, 9.268488e-02, 9.365035e-02, 9.461582e-02, 9.558128e-02])
        dynamic_timeout_quantized_selection_true_acc = np.array([0.630429, 0.870839, 0.879687, 0.883928, 0.894703, 0.900520, 0.903519, 0.901929, 0.896521, 0.887323, 0.885619, 0.880964, 0.881657, 0.879792, 0.878960, 0.878846, 0.877973, 0.878795, 0.876405, 0.874096, 0.874054, 0.877390, 0.882393, 0.885378, 0.887042, 0.887133, 0.888124, 0.891772, 0.894856, 0.894653, 0.893537, 0.893280, 0.894243, 0.895233, 0.896959, 0.898625, 0.898863, 0.897194, 0.895272, 0.893958, 0.895032, 0.896225, 0.897548, 0.898162, 0.899341, 0.900465, 0.901198, 0.900626, 0.900055, 0.899483, 0.898416, 0.897576, 0.896707, 0.895838, 0.895234, 0.894963, 0.893309, 0.891515, 0.889720, 0.887657, 0.886079, 0.886276, 0.886649, 0.887023, 0.887398, 0.888255, 0.889091, 0.888469, 0.887653, 0.886836, 0.885881, 0.885030, 0.884988, 0.884752, 0.884516, 0.884280, 0.884223, 0.884304, 0.885688, 0.887072, 0.888457, 0.889841, 0.890755, 0.890967, 0.890528, 0.890090, 0.889651, 0.889213, 0.888866, 0.888819, 0.888384, 0.887950, 0.887515, 0.887081, 0.886565, 0.885037, 0.884131, 0.883226, 0.882321, 0.881416])

        # optimize diff e8e93020
        dynamic_timeout_quantized_min_diff_runtime_fraction = np.array([0.001609, 0.002547, 0.003486, 0.004424, 0.005363, 0.006302, 0.007240, 0.008179, 0.009117, 0.010056, 0.010994, 0.011933, 0.012871, 0.013810, 0.014748, 0.015687, 0.016625, 0.017564, 0.018502, 0.019441, 0.020379, 0.021318, 0.022256, 0.023195, 0.024134, 0.025072, 0.026011, 0.026949, 0.027888, 0.028826, 0.029765, 0.030703, 0.031642, 0.032580, 0.033519, 0.034457, 0.035396, 0.036334, 0.037273, 0.038211, 0.039150, 0.040088, 0.041027, 0.041965, 0.042904, 0.043843, 0.044781, 0.045720, 0.046658, 0.047597, 0.048535, 0.049474, 0.050412, 0.051351, 0.052289, 0.053228, 0.054166, 0.055105, 0.056043, 0.056982, 0.057920, 0.058859, 0.059797, 0.060736, 0.061675, 0.062613, 0.063552, 0.064490, 0.065429, 0.066367, 0.067306, 0.068244, 0.069183, 0.070121, 0.071060, 0.071998, 0.072937, 0.073875, 0.074814, 0.075752, 0.076691, 0.077629, 0.078568, 0.079506, 0.080445, 0.081384, 0.082322, 0.083261, 0.084199, 0.085138, 0.086076, 0.087015, 0.087953, 0.088892, 0.089830, 0.090769, 0.091707, 0.092646, 0.093584, 0.094523])
        dynamic_timeout_quantized_min_diff_true_acc = np.array([0.898875, 0.900107, 0.914068, 0.908409, 0.892360, 0.891800, 0.898155, 0.894890, 0.894923, 0.900389, 0.903285, 0.906275, 0.901771, 0.902656, 0.902344, 0.903999, 0.905402, 0.903656, 0.904517, 0.905251, 0.903801, 0.902986, 0.904368, 0.904848, 0.906101, 0.908765, 0.912711, 0.916872, 0.914912, 0.913193, 0.914907, 0.917773, 0.919231, 0.918870, 0.917962, 0.916362, 0.916838, 0.917315, 0.917171, 0.916020, 0.914869, 0.914273, 0.916905, 0.919720, 0.922358, 0.923650, 0.922345, 0.921041, 0.919965, 0.919068, 0.919022, 0.918995, 0.918969, 0.919501, 0.920275, 0.920861, 0.921447, 0.921971, 0.922380, 0.922916, 0.923437, 0.923957, 0.924087, 0.924392, 0.924366, 0.924142, 0.923918, 0.923716, 0.923296, 0.922581, 0.922648, 0.922907, 0.923167, 0.923426, 0.923991, 0.924619, 0.924603, 0.924588, 0.924573, 0.924557, 0.924542, 0.924798, 0.924774, 0.924236, 0.923698, 0.923160, 0.922622, 0.922080, 0.921227, 0.920303, 0.920107, 0.919911, 0.919715, 0.919519, 0.919324, 0.919415, 0.920063, 0.920904, 0.921765, 0.922625])

        al_runtime_frac = np.array([0.02106387, 0.02159122, 0.02176197, 0.02385467, 0.02522425, 0.02807994, 0.05256794, 0.14633324])
        al_true_acc = np.array([0.59288538, 0.6798419,  0.69762846, 0.76482213, 0.77865613, 0.80237154, 0.82411067, 0.8972332])

        plt.figure(figsize=(10, 6))
        #plt.plot(random_baseline_whole_instances_runtime_frac, random_baseline_whole_instances_true_acc, marker='x', label="random instances")
        plt.plot(random_baseline_dynamic_timeout_runtime_frac, random_baseline_dynamic_timeout_true_acc, marker='x', label="random dynamic timeout")
        plt.plot(variance_based_selection_runtime_frac, variance_based_selection_true_acc, marker='x', label="variance based selection")
        plt.plot(dynamic_timeout_optimized_runtime_frac, dynamic_timeout_optimized_true_acc, marker='x', label="dynamic timeout optimized")
        plt.plot(dynamic_timeout_quantized_selection_runtime_fraction, dynamic_timeout_quantized_selection_true_acc, marker='x', label="min diff*rt")
        plt.plot(dynamic_timeout_quantized_min_diff_runtime_fraction, dynamic_timeout_quantized_min_diff_true_acc, marker='x', label="min diff")
        #plt.plot(al_runtime_frac, al_true_acc, marker='x', label="active learning")
        plt.legend()
        plt.xlabel("Fraction of Runtime")
        plt.xlim(right=0.1)
        plt.ylabel("Ranking Accuracy")
        plt.title("Comparision of different instance selection methods")
        plt.grid(True, linestyle="--", alpha=0.5)
        plt.tight_layout()
        # Show or save
        plt.show()
        #plt.savefig("instance_histogram.png", dpi=300)